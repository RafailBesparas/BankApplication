package org.example.model;

// Brings in the JPA annotations to map this class to a database table.
import jakarta.persistence.*;

// Used for handling money values accurately.
import java.math.BigDecimal;
// Used to store the date and time of each transaction.
import java.time.LocalDateTime;

/**
 * Represents a financial transaction performed by a client.
 * <p>
 * This entity acts as the audit record for all account operations, including:
 * <ul>
 *     <li>Deposits</li>
 *     <li>Withdrawals</li>
 *     <li>Transfers (both incoming and outgoing)</li>
 * </ul>
 *
 * <b>Compliance:</b> This class plays a central role in meeting financial traceability,
 * fraud detection, and auditing requirements such as SOX, PSD2, and PCI DSS.
 *
 * <b>Design:</b> Each transaction is tied to an {AccountModel} through a many-to-one relationship.
 * Transactions are persisted chronologically and should not be modified post-creation in production systems.
 *
 * @author Rafael Besparas
 */

// Marks this class as a JPA entity (it will become a table in the database).
@Entity
public class Transaction {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    // Unique ID for each transaction. Auto-generated by the database.
    private Long id;

    /** Transaction amount in currency units (positive value). */
    private BigDecimal amount;

    // Type of transaction.
    private String type; // "DEPOSIT" or "WITHDRAWAL or Transfer In or Transfer Out"

    /** Date and time when the transaction was executed. */
    private LocalDateTime timestamp;

    // Reference to the account model, that owns this transaction
    // Many transactions can only be linked to one account
    // One account can make multiple transactions
    @ManyToOne
    @JoinColumn(name = "account_id")
    private AccountModel account;

    /** Default constructor for JPA. */
    public Transaction() {}

    /**
     * Full constructor to initialize transaction.
     *
     * @param amount    amount of money involved
     * @param type      transaction type
     * @param timestamp time of transaction
     * @param account   associated account
     */
    public Transaction(BigDecimal amount, String type, LocalDateTime timestamp, AccountModel account) {
        this.amount = amount;
        this.type = type;
        this.timestamp = timestamp;
        this.account = account;
    }

    // Getters and Setters

    public Long getId() { return id; }

    public void setId(Long id) { this.id = id; }

    public BigDecimal getAmount() { return amount; }

    public void setAmount(BigDecimal amount) { this.amount = amount; }

    public String getType() { return type; }

    public void setType(String type) { this.type = type; }

    public LocalDateTime getTimestamp() { return timestamp; }

    public void setTimestamp(LocalDateTime timestamp) { this.timestamp = timestamp; }

    public AccountModel getAccount() { return account; }

    public void setAccount(AccountModel account) { this.account = account; }
}
